# Script para probar la conexi√≥n a Rekognition y las colecciones
# Ejecuta: python test_rekognition.py

import boto3
from botocore.exceptions import ClientError

def probar_rekognition():
    """Prueba b√°sica de conectividad a Rekognition"""
    
    print("=" * 50)
    print("üß™ PRUEBA DE REKOGNITION")
    print("=" * 50)
    
    try:
        rekognition = boto3.client('rekognition', region_name='us-east-1')
        
        # 1. Listar colecciones
        print("1Ô∏è‚É£ Probando listar colecciones...")
        response = rekognition.list_collections()
        colecciones = response.get('CollectionIds', [])
        print(f"‚úÖ Colecciones disponibles: {len(colecciones)}")
        for col in colecciones:
            print(f"   ‚Ä¢ {col}")
        
        # 2. Verificar colecciones espec√≠ficas
        print("\n2Ô∏è‚É£ Verificando colecciones del proyecto...")
        colecciones_proyecto = ['residentes-condominio', 'visitantes-condominio']
        
        for col in colecciones_proyecto:
            if col in colecciones:
                try:
                    stats = rekognition.describe_collection(CollectionId=col)
                    print(f"‚úÖ {col}: {stats['FaceCount']} rostros indexados")
                except Exception as e:
                    print(f"‚ùå Error en {col}: {e}")
            else:
                print(f"‚ùå {col}: No existe")
        
        # 3. Probar detecci√≥n de rostros (sin imagen real)
        print("\n3Ô∏è‚É£ Verificando permisos de Rekognition...")
        
        # Intentar operaci√≥n que requiere permisos sin imagen real
        try:
            # Esta operaci√≥n fallar√° por falta de imagen, pero nos dice si tenemos permisos
            rekognition.detect_faces(Image={'Bytes': b'fake'})
        except ClientError as e:
            error_code = e.response['Error']['Code']
            if error_code == 'InvalidImageException':
                print("‚úÖ Permisos de DetectFaces: OK")
            elif error_code == 'AccessDeniedException':
                print("‚ùå Permisos de DetectFaces: NO AUTORIZADO")
            else:
                print(f"‚ö†Ô∏è DetectFaces: {error_code}")
        
        print("\nüéâ RESULTADO: Rekognition est√° configurado correctamente")
        return True
        
    except ClientError as e:
        error_code = e.response['Error']['Code']
        if error_code == 'AccessDeniedException':
            print("‚ùå ERROR: Sin permisos para Rekognition")
            print("üí° Soluci√≥n: Ejecuta setup-iam.ps1")
        else:
            print(f"‚ùå ERROR: {e}")
        return False
    
    except Exception as e:
        print(f"‚ùå ERROR GENERAL: {e}")
        return False

def mostrar_endpoints_disponibles():
    """Muestra informaci√≥n sobre los endpoints de AI"""
    
    print("\n" + "=" * 50)
    print("üìç ENDPOINTS DE IA DISPONIBLES")
    print("=" * 50)
    
    endpoints = [
        {
            'url': 'POST /api/ai/escanear-rostro/',
            'descripcion': 'Busca rostros conocidos en imagen',
            'body': 'multipart/form-data con campo "image"',
            'respuesta': '{"matched": true/false, "resident": "nombre", "confidence": 95.5}'
        },
        {
            'url': 'POST /api/ai/registrar-rostro/',
            'descripcion': 'Registra rostro de residente en S3/Rekognition',
            'body': '{"resident_id": 1, "image_key": "faces/residente.jpg"}',
            'respuesta': '{"face_id": "abc123...", "confidence": 99.8}'
        }
    ]
    
    for i, ep in enumerate(endpoints, 1):
        print(f"{i}Ô∏è‚É£ {ep['url']}")
        print(f"   üìù {ep['descripcion']}")
        print(f"   üì§ Body: {ep['body']}")
        print(f"   üì• Respuesta: {ep['respuesta']}")
        print()

if __name__ == "__main__":
    exito = probar_rekognition()
    mostrar_endpoints_disponibles()
    
    if exito:
        print("‚úÖ Todo listo para usar reconocimiento facial!")
    else:
        print("‚ùå Revisa la configuraci√≥n antes de usar los endpoints")
    
    print("\nüí° Para probar: usa Postman o curl con una imagen real")
    print("üìñ Logs detallados en la consola de Django al hacer requests")