# Script para configurar las colecciones de Rekognition
# Ejecuta: python setup_rekognition_collections.py

import boto3
import json
from botocore.exceptions import ClientError

def verificar_y_crear_colecciones():
    """Verifica y crea las colecciones necesarias para Rekognition"""
    
    rekognition = boto3.client('rekognition', region_name='us-east-1')
    
    # Colecciones que necesita tu aplicaci√≥n
    colecciones_necesarias = [
        'residentes-condominio',
        'visitantes-condominio'
    ]
    
    print("=" * 60)
    print("üîç CONFIGURACI√ìN DE COLECCIONES REKOGNITION")
    print("=" * 60)
    print()
    
    try:
        # Listar colecciones existentes
        print("üìã Verificando colecciones existentes...")
        response = rekognition.list_collections()
        colecciones_existentes = response.get('CollectionIds', [])
        
        print(f"‚úÖ Colecciones encontradas: {len(colecciones_existentes)}")
        for coleccion in colecciones_existentes:
            print(f"   ‚Ä¢ {coleccion}")
        print()
        
        # Crear colecciones faltantes
        for coleccion in colecciones_necesarias:
            if coleccion not in colecciones_existentes:
                print(f"üîß Creando colecci√≥n: {coleccion}")
                try:
                    rekognition.create_collection(CollectionId=coleccion)
                    print(f"‚úÖ Colecci√≥n '{coleccion}' creada exitosamente")
                except ClientError as e:
                    error_code = e.response['Error']['Code']
                    if error_code == 'ResourceAlreadyExistsException':
                        print(f"‚ö†Ô∏è Colecci√≥n '{coleccion}' ya existe")
                    else:
                        print(f"‚ùå Error creando '{coleccion}': {e}")
            else:
                print(f"‚úÖ Colecci√≥n '{coleccion}' ya existe")
        
        print()
        print("=" * 60)
        print("üìä RESUMEN FINAL")
        print("=" * 60)
        
        # Verificar colecciones finales
        response = rekognition.list_collections()
        colecciones_finales = response.get('CollectionIds', [])
        
        for coleccion in colecciones_necesarias:
            if coleccion in colecciones_finales:
                print(f"‚úÖ {coleccion} - DISPONIBLE")
                
                # Obtener estad√≠sticas de la colecci√≥n
                try:
                    stats = rekognition.describe_collection(CollectionId=coleccion)
                    face_count = stats['FaceCount']
                    print(f"   ‚îî‚îÄ‚îÄ Rostros indexados: {face_count}")
                except Exception as e:
                    print(f"   ‚îî‚îÄ‚îÄ Error obteniendo stats: {e}")
            else:
                print(f"‚ùå {coleccion} - NO DISPONIBLE")
        
        print()
        print("üí° NOTAS IMPORTANTES:")
        print("‚Ä¢ Las colecciones est√°n vac√≠as inicialmente")
        print("‚Ä¢ Los rostros se indexan cuando subes fotos de residentes")
        print("‚Ä¢ La b√∫squeda funciona solo despu√©s de indexar rostros")
        print("‚Ä¢ Costo: ~$1 USD por 1000 rostros indexados")
        
    except ClientError as e:
        error_code = e.response['Error']['Code']
        if error_code == 'AccessDeniedException':
            print("‚ùå ERROR: No tienes permisos para acceder a Rekognition")
            print("üí° Soluci√≥n: Ejecuta el script setup-iam.ps1 para configurar permisos")
        else:
            print(f"‚ùå ERROR: {e}")
    except Exception as e:
        print(f"‚ùå ERROR INESPERADO: {e}")

def verificar_project_arn():
    """Verifica el ARN del proyecto de Custom Labels"""
    
    print()
    print("=" * 60)
    print("üéØ VERIFICACI√ìN DE CUSTOM LABELS PROJECT")
    print("=" * 60)
    
    rekognition = boto3.client('rekognition', region_name='us-east-1')
    project_arn = 'arn:aws:rekognition:us-east-1:851725478821:project/ComportamientoSospechoso/version/ComportamientoSospechoso.2025-09-21T20.10.36/1758499835614'
    
    try:
        # Verificar el proyecto
        response = rekognition.describe_project_versions(
            ProjectArn='arn:aws:rekognition:us-east-1:851725478821:project/ComportamientoSospechoso'
        )
        
        print(f"‚úÖ Proyecto encontrado: ComportamientoSospechoso")
        
        for version in response['ProjectVersionDescriptions']:
            version_arn = version['ProjectVersionArn']
            status = version['Status']
            print(f"   ‚Ä¢ Versi√≥n: {version_arn.split('/')[-2]}")
            print(f"     Estado: {status}")
            
            if version_arn == project_arn:
                print(f"     ‚úÖ ARN coincide con tu c√≥digo")
            else:
                print(f"     ‚ö†Ô∏è ARN diferente en tu c√≥digo")
    
    except ClientError as e:
        error_code = e.response['Error']['Code']
        if error_code == 'ResourceNotFoundException':
            print("‚ùå Proyecto 'ComportamientoSospechoso' no encontrado")
            print("üí° Puede que necesites crear el proyecto en la consola de AWS")
        else:
            print(f"‚ùå Error verificando proyecto: {e}")

if __name__ == "__main__":
    verificar_y_crear_colecciones()
    verificar_project_arn()
    
    print()
    print("üöÄ ¬°Configuraci√≥n completada!")
    print("üìñ Ahora puedes usar las funciones de reconocimiento facial")
    print()